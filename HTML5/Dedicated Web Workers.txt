Web Workers : 
        A web worker is a JavaScript running in the background, without affecting the performance of the page.
        When executing scripts in an HTML page, the page becomes unresponsive until the script is finished.

        A web worker is a JavaScript that runs in the background, independently of other scripts, without affecting the performance of the page. 
        You can continue to do whatever you want: clicking, selecting things, etc., while the web worker runs in the background.
        
        Shared Workers
        Dedicated Workers
            Messages passed between the main page and workers are copied, not shared. It appears that the object is being passed directly to the worker even though it's running in a separate, dedicated space. In actuality, what is happening is that the object is being serialized as it's handed to the worker, and subsequently, de-serialized on the other end. The page and worker do not share the same instance, so the end result is that a duplicate is created on each pass. Most browsers implement this feature by automatically JSON encoding/decoding the value on either end.
            
            
        MessageEvent : 
                Event type used to communicate
                JSON,String,File,BLOB, ArrayBuffer objects can be passed as part of MessageEvent. For dedicated workers, a copy of data is  sent and not the actual data via event. So if you are sending data > 50MB, there is a noticable time overhead.
                
                To overcome this dilemma, use below way to transfer objects
                
                   worker.postMessage(arrayBuffer, [arrayBuffer]); 
                   //https://www.html5rocks.com/en/tutorials/workers/basics/
                   
        Creating worker : 
            remove fiel - var worker = new Worker("http://jenkov.com/worker.js");
            local file - 
            inline script tag
            
                
        
        Closing Worker : from main page : worker.terminate();
                         from worker  : self.close();
                         
        
        Worker Environment : 
            Both self and this reference the global scope for the worker
            
            Due to their multi-threaded behavior, web workers only has access to a subset of JavaScript's features.
                1.  The navigator object
                2.  The location object (read-only)
                3.  XMLHttpRequest
                4.  setTimeout()/clearTimeout() and setInterval()/clearInterval()
                5.  The Application Cache
                6.  Importing external scripts using the importScripts() method
                7.  Spawning other web workers
                
            WORKERS "DO NOT" HAVE ACCESS TO
                1.  DOM
                2.  window object
                3.  document object
                4.  parent object
                
                This is because dedicated workers run in completely different world. If they can have access to these things they can be tricked 
                do evil things very easily.
                
                >>> They can access setTimeout and setInterval from window
                
            We can spown sub workers froma web workers.
            
            We can ECMA6 importScipts feature to import reusable script inot web worker.
                importScripts('script1.js');
                
                
                
             
        Spawning other web workers : 
            https://www.html5rocks.com/en/tutorials/workers/basics/#toc-enviornment-subworkers
            
            So-called sub-workers must be hosted within the same origin as the parent page
          
        Error handling : 
            If an error occurs while a worker is executing, the an ErrorEvent is fired
            
            
        Async call vs web worker?
        
        How performance improvement in your project?
            Workers are silet species and can perform background task.
            In my application, millions of thumbnails are to be displayed on page load, so we are loading just initial 
            1000 objects and then allowing user to iteract with them. In background workers are creating the required DOM(not inserting), loadig the metadata of objects etc.
            Basically caching is done by webworkers.
            
            
            
            