Readme file formatting
	https://help.github.com/articles/basic-writing-and-formatting-syntax/#headings
	
Readme File Emoji cheatsheet
	https://www.webpagefx.com/tools/emoji-cheat-sheet/	
	
Easy to learn git basics on the go : https://try.github.io/levels/1/challenges/25 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> IMP
	
	
Full lessons for git : http://gitreal.codeschool.com/?utm_source=github&utm_medium=codeschool_option&utm_campaign=trygit	





------------------ ------------------ ------------------ ------------------ ------------------ ------------------ ------------------ ------------------ ------------------ ------------------ ------------------ 

start .
		Open file explorer at current directory of git

git add
		Add file to stage
		
git add .
		Add all file to stage.	

git init
		create hidden .git folder

git clone repoURL

git status

git checkout -b branch_name
		Create new Branch : git checkout is a command youâ€™ll use a lot, to switch between branches.

git commit	-m "Some Message"	
		
git pull
		Once you switch to some branch, you need to pull code from that branch into your current directory.
		
git branch	
		List all branches in current repo.
		
git branch branch_name
		Create new branch branch_name	
		
git branch -d branch_name
		Delete a branch
		
git rebase
	Consider you have created a feature branch F1 from master and working on that branch.
	After few days some developer D1 adds few commits to master branch.
	Now your F1 branch points to master branch but lags few commits (that done by some developer D1)
	HEre you want your F1 branch to refer to latest commit(HEAD) of master, so that you can get lastest code pushed by D1.
	You rebase.
	You rebase F1 branch with master.
	Now you have latest changes from master.
	You can do : "git checkout feature" and "git rebase master"
	
	
	Same thing you can do with merging. Rebasing and Merging basically do same thing in completely diffrent way.
	You could do : "git checkout F1" and "git merge master"
					OR
					git merge master feature
	

git merge master feature
		Merges changes of master with current branch you are on.
		-- merge from master to feature branch
	
git log	


git revert vs git checkout
	git revert can revert your file to a specified commit in your repo.
		It has commit level scope.
	
	git checkout can revert file to a tip of your branch(HEAD)
		It has file level scope


git reset filename	
	Unstage files	
	
git rm "*.text"	
	Remove all txt files
	
git stash
	When you have a local modifications and you want to pull latest code. Same Latest files have been modified as that of your files.
	So pull will not work. You need to stash changes now. Stashing will create a local copy of yur changes. Now git pull work as if you dont have any local changes.
	Once pull succeeds, you can pop your stashed chages back using "git stash pop".
	
	"git stash pop" : brings back stashed changes.
	"git stash show"
	"git stash drop" : drop your local stash changes and work with latest copy from scm
	"git stash clear" : clears all the stashes
	
Set Diff tool :
	git config --global diff.tool bc3
	git config --global difftool.bc3.path "c:/Program Files (x86)/Beyond Compare 4/bcomp.exe"
		After this configuration, run "git difftool" command to check if git can open diff tool we just set.

Set merge tool : 
	Run merge conflict resolution tools to resolve merge conflicts
	git config --global merge.tool bc3
	git config --global mergetool.bc3.path "c:/Program Files (x86)/Beyond Compare 4/bcomp.exe"



------------------ ------------------ ------------------ ------------------ ------------------ ------------------ ------------------ ------------------ ------------------ ------------------ ------------------ 

Git Eclipse :
	Git Reset : In History view, you can select a commit and reset your branch to that view.

Local Git Repository :
	When it becomes cumbersome to maintain your files even when you are not using github. You can use local git repo to track your files and changes.
	This problem I had in 3d
	Open Git Repo view --> look for icon to create new local git repo.

------------------ ------------------ ------------------ ------------------ ------------------ ------------------ ------------------ ------------------ ------------------ ------------------ ------------------ 

Git Bash Shortcuts :
ctrl + L : clear console

ctrl + d : exit console


	