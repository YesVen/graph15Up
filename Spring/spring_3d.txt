Rod JohnSon

Use Spring tools suite IDE/eclipse plugin for spring developement *******************

As an alternative when everyone is struggling with heavy weight EJBs

Advantages:
		code in POJOS
		Dependency injection (IoC)
		Lightweight
		Plug and play due to modularity(AOP,MVC,Security etc)
		
IoC is a general concept and it can be implemented in multiple ways. DI is just a flavour of IoC.
IoC says , "The application controls the framework, not the framework controls the application".
Even if you remove spring itself from the equation, your application still is decoupled. That much power spring puts in your app.


When to use xml configuration and when to use annotation configuration?
	one of the major disadvantage of annotation based aop is that it required your classes to be rebuild and in it turn involves rebuild, redeploy and restart server. So its advisable to use annotation based aop only when you are not making too much changes in your configuration.
	On other hand, xml based configuration is pretty hard to handle and creates a confusion. So need to make a concious decision.
	
	However, people still feel to go with more xml based approach. Because it gives you a full view of your application beans and dependencies in one shot.
	
	
Spring Container : 
	Bean Factory Container:
			Lightweight container
			e.g 	BeanFactory beanFactory = new XmlBeanFactory(new FileSystemResource("sweat/like/a/pro/setterinjection/spring.xml"));
					Triangle triangle = (Triangle) beanFactory.getBean("triangle");
			methods : 	Its fairly simple factory having just 6 methods
						containsBean, getBean, isSingleTon, getType etc.
				
	ApplicationContext Container : 
			Advanced sprint container having capabilities like publish Application Events,resolve textual messages.
			Includes all functionality of BeanFactory and used in Enterprise Applications.
			
			e.g.	ApplicationContext context = new ClassPathXmlApplicationContext("spring.xml");
					Triangle triangle = (Triangle) context.getBean("triangle");
		
					FileSystemXMLApplicationContext
			
Dependency Injection Mechanisms : 
	Setter Injection
	Constructor Injection	
	
Bean Scopes : 
	Singleton :		Only one instance of bean per Spring Container. Its Default.
					e.g. connection to a database
					
	Prototype :		New instance every time a bean is requested		
					e.g. 
		
	Request	  :		Single instance of bean per http request
					As soon as request completes, bean will be out of scope and garbage collected.
					
					
	Session	  :		Single bean instance per http session
					As soon as user ends its session, bean is out of scope.
					e.g.User authenticated session.
					
	Global Session : 	Single bean instance per Global http session.
						Global-session is a little different in sense that it is used when application is portlet based. In portlets, there will be many applications inside a big application and a bean with scope of ‘global-session’ will have only one instance for a global user session.

	e.g. 	<bean id="demoBean" class="com.howtodoinjava.application.web.DemoBean" scope="session" />
			@Scope("session") -- on a bean class

XML Based Configuration	Properties:
		abstract
		autowire-candidate : We can exclude a bean from auto wiring by making this false.
		scope
		primary
		init-method
		destroy method
		factory-bean
		factory-method
		autowire
		parent
		lazy-init : Makes this bean to be lazily initialised. Default is eager initialization.
			
			
Bean Lifecycle :
		Init Phase :
				Spring Container will scan through xml metadata to find bean definition
				It will create a bean object by reflection API/default constructor
				Aware Interfaces will Run if defined
				Bean Post Processor's postProcessBeforeIntialization will be called
				AfterpropertiesSet method of InitialisingBean interface will run
				init-method
		Destruction	Phase :
				Bean Post Processor's  postProcessAfterInitialization will be called
				destroy method of DisposableBean will be called
				destroy-method
		
		
			
Bean LifeCycle Hooks  : 
		bean life cycle is maintained by Spring container but spring provides so hooks to play around bean life.
		xml conf : init-methods and destroy methods
		annotation : @PostConstruct and	@PreDestroy
		Aware interfaces : ApplicaionContextAware, ApplicationEventPublisherAware, BeanNameAware, BeanFactoryAware etc.
		
		
Bean Post Processing : 
			Implement BeanPostProcessor interface
			it has postProcessBeforeIntialization() and postProcessAfterInitiliazation()

Inner Beans : In Spring framework, whenever a bean is used for only one particular property, it’s advise to declare it as an inner bean.
			   Like Inner classes are the classes which are defined inside the scope of another class. Similarly inner beans are the beans which are defined in the scope of another bean.
			   
			   e.g.
			   <bean id=”outer_bean” class=”OuterBean”>
				  <property name=”innerbean” id="innerbean">
					   <bean  class=”InnerBean”/>
				  </property>
				</bean>
			  Here, innerbean will be available only to the bean in which it is defined. Spring container will just ignore id/name properties of bean.
			
Autowiring Modes : 
			No 			:	No wiring at all
			byName		:	wiring by name of property
			byType		:	Exactly one bean of type should be present else Fatal Error will be thrown.
			constructor	:	By type but matching constructor is required
			autodetect	:	By default constructor is used. If not present then byType is used.
			
			We can also use it on bean classes with annotation @autowired. This annotation can be used on member variable, constructor or setter method.
			
			By default autowiring is by Constructor followed by byType. 
			We can use @Qualifier to resolve the beans if more than one beans of same type are present. 
			@Qualifier("circleRelatedBean") --- your spring.xml file should have a bean with name="circleRelatedBean"
			
			We can exclude a bean from auto wiring by using autowire-candidate=false in bean definition.
			
			
Do not specify version numbers in Spring schema references. Because spring automatically takes the highest version available from project dependencies.
		<?xml version="1.0" encoding="UTF-8"?>
		<beans xmlns="http://www.springframework.org/schema/beans"		
			http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-3.0.xsd">
			
		must be written as 

			<?xml version="1.0" encoding="UTF-8"?>
			<beans xmlns="http://www.springframework.org/schema/beans"
			  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			  xmlns:context="http://www.springframework.org/schema/context"
			  xsi:schemaLocation="http://www.springframework.org/schema/beans
			  http://www.springframework.org/schema/beans/spring-beans.xsd
			  http://www.springframework.org/schema/context
			  http://www.springframework.org/schema/context/spring-context.xsd">
			
			
Best Practices :	https://howtodoinjava.com/best-practices/13-best-practices-for-writing-spring-configuration-files/
	1.	Prefer setter injection over constructor injection
	2.	Prefer type over index for constructor argument matching in Constructor injection.
	3.	Reuse bean definitions as much as possible
	4.	Always use ids as bean identifiers. Just an industry standard.
	5.	Try to avoid autowiring. Autowiring is a great feature if you can manage it in long term. Usually it is beneficial if you project is having 
		very few beans and you can almost remember them all in your memory as well.As soon as project gets bigger, autowiring starts creating trouble in identifying correct dependency to use. The main drawback, I find is not to have a overview of whole system binded together. This is where spring configuration files win.
	6.	Use dependency-check at the development phase. Its a validation mechanism, done by spring container to check if all dependencies are met.
	7.	Add a header comment to each configuration file
			<beans>
				<description>
					This configuration file will have all beans
					which may be used for controlling transactions.
				</description>
				...
			</beans>
			
			
			
			

Stereotype Annotations : 
		https://howtodoinjava.com/spring/spring-core/how-to-use-spring-component-repository-service-and-controller-annotations/
		Classes having these annotations are automatically available for use. We dont need to add entry for them in spring xml file provided that component scanning mechanism is turned on.
		Beans marked with stereotype annotations are automatically imported into the DI container

	@Component
	
	@Controller
	
	@Respository : 	The @Repository annotation is a specialization of the @Component annotation with similar use and functionality. 
						In addition to importing the DAOs into the DI container, it also makes the unchecked exceptions (thrown from DAO methods) eligible for translation into Spring DataAccessException.
	@Service : 	As of now does nothing more than @Component. But its good practice to use it for classes meant for Service layer.
				e.g. @Service (“employeeManager”) or @Service
					 Here bean will be regestered with employeeManager name in DI container.
					 
					 
		
Spring does eager initialization of beans. If you want to convey that defer initilization intil requested, then use
		default-lazy-init on beans tag OR
		lazy-init on bean tag
		
































			
			
	
	
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
		
		
	



		