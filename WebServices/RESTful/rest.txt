ROY Fielding
Representational State Transfer 
	We are transferring the representation of a resource in form of json,xml,html etc.
Merely an Architectural Style
Services built on the principles of REST are called RESTful web services
Uses HTTP protocol

Advantages : 
	Lightweight
	Stateless
		Doesn't maintain what client has asked before current request?
		i.e client cannot say, give me account balance of user in last response. server simply don't remember last response.
	No specification and tight coupling (like WSDL though it has WADL somewhere)
	Caching mechanism
	No language/framework barrier cause it can work with any lang and fw.
	Can work with any data type(due to HTTP)
	Layered Architecture
		We can Put an extra middle-ware layer between client and server which can have different purpose(redirecting, partial response etc). This is called layered architecture
	
REST style has a specification JAX-RS
SOAP style has a specification JAX-WS

JAX-RS Specification is implemented by few vendors like 
		Apache CXF
		JBoss RestEasy
		Oracle Jersey
		GlassFish Jersey
		
JAX-WS Specification is implemented by few vendors like 
		Apache Axis
		
		

JAX-RS Specification defines some annotations like below
@GET @PUT @POST @DELETE
@Path : Class and method level annotation.
@FormParam @MatrixParam @HeaderParam @PathParam
@Produces @Consumes

@Path : Class and method level annotation.
@Produces : Method and class level annotation
@Consumes : Class and method level annotation

@DefaultValue : Provide a default value to params if found null

What is @MatrixParam? What is use of it?
		The important difference is that matrix parameters apply to a particular path element while query parameters apply to the request as a whole. 
		This comes into play when making a complex REST-style query to multiple levels of resources and sub-resources:
		
		e.g. "http://example.com/res/categories;name=foo/objects;name=green/?page=1"
		It really comes down to namespacing. If only query parameters were used, you would end up with parameters like "category_name" and "object_name" 
		and you would lose the clarity added by the locality of the parameters within the request
		If your query has only one "level", then the difference is not really important and the two types of parameters are effectively interchangeable.
		
JAX-B : Comes with J2EE platform in build (Java Architecture for XML Binding)
		Used for XML marshalling
		
		
TOp Down WEb Service Approach : 
	USed in SOAP where u create a WSDL and then looking at WSDL, you design your java classes
	If WSDL changes, java code has to change
	
	In oppose to that, in bottom up approach, java classes are designer with annotations and WSDL will be automatically generated.
	

There is no need to handle thread safety in WS because by default a new resource will be created to for each request. 
Service classes are not Singleton by default, so no need to worry about thread safety.
		
	
		
		
		
Jackson : Need to add maven dependency.	Used for JSON marshalling
				<dependency>
					<groupId>com.fasterxml.jackson.jaxrs</groupId>
					<artifactId>jackson-jaxrs-json-provider</artifactId>
					<version>2.8.0</version>
				</dependency>


REST Exception Hierarchy:
	WebApplicationException
		ClientErrorException	status 4xx   	e.g. BadRequestException,NotFoundException etc
		RedirectionException	status 3xx		e.g. 
		ServerErrorException	status 5xx 		e.g. InternalServerErrorException, ServiceUnavailableException
All these exception are analogous with custom Exception mapper.		

		
IF method produces more than one type of data, then what type to return is decided based on Accept header of request. This is called Content Negotiation.

@singleton

@ApplicationPath

Rest Client


We can create variables in class like below. Advantage is that you don't need to map them in each and every method. They will be available directly. 
	@Context UriInfo info;
	@Context HttpHeaders headers
@see : graph15Up\WebServices\RESTful\advancedjaxrs\sweat\like\pro\three\MyResource.java	



Rest Filters
	ContainerRequestFilter
	ContainerResponseFilter
	ClientRequestFilter
	ClientResponseFilter
	
Rest Authentication Using ContainerResponseFilter

Rest Interceptor

Interceptor vs Filter
	Filter : Designed to manipulate meta-data i.e. headers, URI etc. 
	Interceptor : Designed to manipulate the input and output streams i.e. body

Difference between MessagebodyWriter and Interceptors??????????????	
	Interceptor mainly designed to convert data in body to some other format(base64 to utf format) while messagebodyreader/writer are used to actually write the data(Converting data to java object) on the input/output streams.
	
Programs : 
	Produces multiple types : Use Accept Header
	Add AuthenticationFilter to ApparelService
	Find out which authentication do enovia servers use? observe request going through
	
	
HATEOAS : Hypermedia As The Engine OD Application State
			IN addition to sending the requested data, send something the client might be interested into.
			e.g. While sending the product information, send the raw materials associated with it.
			
			
			
Security : 
			javax.ws.core.Security package
			public String sayHello(@Context SecurityContext sc){}
				sc object then can be used to check authentication and authorization.
			Method level annotation @DenyAll,@permitAll,@RolesAllowed can be used


Request Validation : @validator
					 Add a class to do validation (implement validator adaptor)
					 
Best Practices : 
				Nouns instead of Verbs
				Versioning
				HATEOAS
				Select your HTTP method wisely
				
				
OPTIONS : This http method used to find out which http methods are supported by the web server.
		  This is read only method.
		  
HEAD : To get just headers and not the body.		  
				
	
CORS : Cross Origin Resource Sharing
		Need to add below flags on response from server
		Access-Control-Allow-Origin : "name of allowed website"
		Access-Control-Allow-Methods : "GET, PUT"
		Access-Control-Allow-Headers : "headers that can be transferred"
		Access-Control-Allow-Credentials : "Cred info"
		
		Preflight Request : 
			A CORS preflight request is a CORS request that checks to see if the CORS protocol is understood.
			It is an OPTIONS request using two HTTP request headers: Access-Control-Request-Method and Access-Control-Request-Headers, and the Origin header.
			A preflight request is automatically issued by a browser when needed; in normal cases, front-end developers don't need to craft such requests themselves.
			For example, a client might be asking a server if it would allow a DELETE request, before actually sending a DELETE request by using a preflight request
			https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request
			
		
There are tow ways to read headers : @Context Httpheaders
									 @HeaderParam param
						
WADL : Web Application Description Language.
	   Its a xml description of deployed Restful web application.
						
									 
@XMLRootElement : If we specify this annotation on a class, the class becomes eligible for automatic data marshelling between xml and POJO.
				  This JAX-B annotation.
				  
ParamConverterProvider : yesterday to new date object with yesterday's date

MessageBodyReader/Writer : Read write to input/output streams

ContainerResponseFilter/ContainerRequestFilter	: Able to manipulate response and request objects. 
													Adding PoweredBy header to response			
													Aborting request when it cant find cookie header.
													
													
Above classes are present at server side. Similar classes are present on client side as well.
ClientRequestFilter, ClientResponseFilter etc.
see javabrains final video on advanced Rest


@beanParam : USed to marshall data from input request to POJO.


API Documentation : 
	APIDOC eclipse plugin :
			It provides bunch of annotations you can use. Write your code with these annotations, and click on generate it will build html files with proper styling.
	JAXRS-Analyser :
		https://dzone.com/articles/rest-api-documentation-using-jaxrs-analyzer
		JAXRS-ANALYZER uses byte code analysis to create API documentation for java based RESTful projects in Plaintext, Swagger and AsciiDoc formats.
		By using bytecode analysis, there is no need to use any annotation or do any additional coding in the project to use this tool. Analyzer could be used as maven plug-in 
		or as a standalone tool.
While there tools are used for human redable PI docs, we still can use tools that create WADL. WADL can then fed to other tools that can generate API docs for your rest project.
													