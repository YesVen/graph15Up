Generics : 
		https://howtodoinjava.com/core-java/generics/complete-java-generics-tutorial/
		Its all about type safety and type erasure
		Compile time type safety
		Earlier we need to add instance of checks to avoid ClassCastException and make collection adhere to certain types.
		Lot of un-necessary boilerplate code which actually does not add any value.
		
		Type Erasure : It essentially means that all the extra information added using generics into sourcecode will be removed from bytecode generated from it. Inside bytecode, it will be old java syntax which you will get if you donâ€™t use generics at all. This necessarily helps in generating and executing code written prior java 5 when generics were not added in language.
		
		Generic Classes : 
					We can make class to be of certain type by using generics.
					e.g.	ArrayList<E>
							Here if I create ArrayList<String> and I try to add int into it. It will give me compiler error.
				
		Generic Method :	
					e.g.	public static <T> int countAllOccurrences(T[] list, T item) 
					
		Generic Constructor : 
					e.g.	public Dimension(T length, T width, T height){
								  super();
								  this.length = length;
								  this.width = width;
								  this.height = height;
							}
							
		Examples : 
				Unbounded Parametrized types : 
					Collection<?> coll = new ArrayList<String>();
							In future, Same coll can be assigned to HashSet<Person> as well
					Pair<String,?> pair = new Pair<String,Integer>();	
					ArrayList<?>  list = new ArrayList<Long>(); 			
		
				Bounded Parametrized types :
					List<? extends Number> list = new ArrayList<Long>(); //All subclasses that extends number
					List<? super GrandChildren> = new ArrayList<Father>(); //It can Accept Father, GrandFather Types
					
					
		Limitations : 
				private static T member; //This is not allowed. Generics cant work with static.
				
				final List<int> ids = new ArrayList<>(); //Not allowed, cant work with primitives
				
				public class GenericException<T> extends Exception {} //not allowed.
				
		Symbols used :
				Value - V
				Key - K
				Type : T
				Element : E
				
		Questions : 
				Can you pass List<String> to a method which accepts List<Object> 
						--- No. in because List<Object> you can put anything. But a method a accepting List<Object>	and not List<String>. So compiler Error.
				Difference between List<Object> and raw type List in Java?
						Anything can be put into both.
						But List<Object> can be assigned to only and only List<Object>(Compile time error if we assign List<Object> to List<String> ). 
						While raw List can assigned to List<String> or List<Person> etc.
				Difference between List<?> and List<Object> in Java?
						List<?> listOfAnyType;
						List<Object> listOfObject = new ArrayList<Object>();
						List<String> listOfString = new ArrayList<String>();
						List<Integer> listOfInteger = new ArrayList<Integer>();
							  
						listOfAnyType = listOfString; //legal
						listOfAnyType = listOfInteger; //legal
						listOfObjectType = (List<Object>) listOfString; //compiler error - in-convertible types


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------					
Exception : 
			We can theoretically throw an Error. 
			throw new java.lang.Error("this is very bad practice");
			
			try catch is designed for Exceptions and not for errors. So code in Catch block will not be executed as it will not monitor for errors.
			but code in finally block will execute not matter exception/error is thrown. 
			
			Rules : 
				>>>>>>>>>>>If the superclass method does not declare an exception :
											If the superclass method does not declare an exception, subclass overridden method cannot declare the checked exception but it can declare unchecked exception.
				>>>>>>>>>>>If the superclass method declares an exception
											subclass cannot broaden exception in overriding method.
											subclass can choose to not declare exception at all 
			
			
			Checked Exceptions : FileNotFoundException, CloneNotSupportedException, IOException
			Unchecked Exception : NullPointerException, ArrayIndexOutOfBoundException
			
			
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
			
			
Collection vs Stream
	A pipelined representation of collection elements which may or may not be processed sequentially.
	No storage. No Memory allocation.
			A stream is not a data structure that stores elements; instead, it conveys elements from a source such as a data structure,
			an array, a generator function, or an I/O channel, through a pipeline of computational operations.
	Functional in nature. 
			An operation on a stream produces a result, but does not modify its source. 
			For example, filtering a Stream obtained from a collection produces a new Stream without the filtered elements, 
			rather than removing elements from the source collection.
	Laziness-seeking. 
			Many stream operations, such as filtering, mapping, or reducing, collecting, can be implemented lazily, exposing opportunities for optimization.
			For example, "find the first String with three consecutive vowels" need not examine all the input strings. 
			Stream operations are divided into intermediate (Stream-producing) operations and terminal (value- or side-effect-producing) operations.
			Intermediate operations are always lazy.
	Possibly unbounded. 
			While collections have a finite size, streams need not. 
			Short-circuiting operations such as limit(n) or findFirst() can allow computations on infinite streams to complete in finite time.
	Consumable 
			The elements of a stream are only visited once during the life of a stream. 
			Like an Iterator, a new stream must be generated to revisit the same elements of the source			
			
			
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------	

Inner Classes
			
			
			
			
---------------------------------------------------------------------------------------------------------------------------------------------------------------
String 
	it's considered the bad practice to use StringBuffer anymore, because, in almost 99% scenario, you perform string concatenation on the same thread

