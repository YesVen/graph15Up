Programs : 
		Use any module of your choice from angularmodule.org... to see the power of angular in action
		Unit Testing Using Jasmine
		Learn Build tools  : Gulp, Bower, Yeoman
									
		angular Providers?
		routing
			$routeParams
			$route : reload instead of whole app refresh
		Custom Directive with expression Evaluation		
		Create a directive to update time at footer of your site
		
		

Eclipse Configuration For angular : 
	http://www.eclipse.org/webtools/jsdt/
	https://marketplace.eclipse.org/content/angularjs-eclipse#.U4M7rBYqm0o
	ngmodules.org
	getbootstrat.com
    getrandomuser.me
	

AngularJs is all about thinking in angular way. You have to think from entirely different direction as that of jquery.
	
Angular is declarative programming framework
		Meaning you need to write the logic first and then use it logic as a declaration
		e.g. You write your directives and just use it in the html
		
declarative vs imperative programming

Dependency Injection : A concept says that the dependencies you need are given to you rather than you looking for the dependencies.
					e.g. Koushik told example of dev conference  food system

Directive : At a high level, directives are markers on a DOM element that tell AngularJS's HTML compiler ( $compile ) to attach a specified behavior 
			to that DOM element (e.g. via event listeners), or even to transform the DOM element and its children.
			
			There are three types of directives
				Decorator Directives
				DOM manipulating directives
				..???
			
			Custom directive can be expressed in following ways
				<my-custom-directive></my-custom-directive>
				<div my-custom-directive></div>
				<div class="my-custom-directive"></div>
				
			We can restrict how it can be used in html by providing restrict option to directive
				A =  <div Doc></div>
				C =  <div class="Doc"></div>
				E =  <Doc data="book_data"></Doc>
				M =  <!--directive:Doc -->

				
					
Module : Its a collection of directives, services, controllers etc.

ng-init : USed for init purpose but not recommended. It inits variables at $scope.
			Ideal use of this is to alias the special properties of ng-repeat
			
ng-app : Typically we have only one ng-app per html application but it is perfectly fine to have two ng-app in a html. In this case, angular would not auto bootstrap the application and you have to specify the bootstrapping steps.

ng-bind : used to bind an attribute from controller to dom
		  A shorthand notation is preferred in place of this which is {{}}.
		  
ng-model : this directive acts as a model in mvw. 
		   If you add ng-model, to any html element, angular is going to create a property on $scope object.
		   You can actually access that property in your js code.
		  
ng-change : used to trigger a function when something changes.		  

ng-if : evaluate the condition and add/remove element from DOM. As it removes element from DOM its expensive operation as compared to ng-show, ng-hide.
ng-show : evaluate the condition and show the element in DOM
ng-hide : evaluate the condition and hide the element from DOM

ng-repeat : loop over items 

scope : every variable you use in html is $scoped. Meaning it is implicitly attached to $scope.
		Every time property is updated in $scope, angular automatically updates view. This is called duel way binding.
		
		Every Controller has its own scope. WE cannot use variable in scope of controller1 inside controller2.
		
		There is a global scope which every controller has access to. Its called $rootscope.
	
		When we use nested controllers, the scope of parent controller is accessible inside child controllers.
		i.e. If parent scope has variable name=Dnyanesh and we use name variable inside child scope, it will become name=Dnyanesh
		So generally speaking, angular scans scope in upward direction till it find the variable value.
			(Analogous to one of the jquery method that scans in upward direction untill element is found)
		Angular scans till the $rootscope which is THE GOD scope
		
		So in an enterprise application, where hundreds of controllers are there each having its own scope, its relly messy to find out from which scope does this variable value came from.
		To avoid this situation, angular developers have came up with "controller as" syntax. You declare a controller using this syntax and dont worry about the scope issues.
		In this "controller as" syntax it is recommended that u should not inject $scope into a controller.
		e.g. 
			use below code style
			
			var app = angular.module("app", []);
			app.controller("appController", function(/*  No scope injection here  */){
				//angular compiler is gonna provide you scope implicitly using this
				//so this here refers to $scope
				this.name = "Dnyanesh" // This means name variable is attached to $scope of appController
			});
		
			and use this 
			<div ng-controller="appController as controller">
				Name is {{controller.name}} // similar to name --> $scope.name
			</div>
		
		IMP : Use of "this" instead of $scope works only in case of "controller as" syntax. Without controller-as syntax you must inject $scope as usual
		
		See G:\MyWork\Git\graph15Up\AngularJs\Angular V1\programs\test4.html
		You can use {{name}} and {{controller1.name}} both. choice is yours but second one limits your scope to controller1.
			While first scans for name variable until $rootscope.
		
		Angular doesnt create scope just for controllers. It happens to be that it create scopes for few other elements too.
			ng-if
			each item in ng-repeat
			etc
			To understand it, open inspector, look for class ng-scope. You will find it for controller as well as ng-if
		
		
		
Module : Module is a collections of controllers, services, factories etc.
		For each different functionality we can as many modules as we want. They make our code very loosely coupled. So we can import any module developed by any developer in our application and start using right away. We just need to add dependency of that module in our module.
		
		Opposite to it, angular services are local to your application. You can build reusable services and let your controllers depend on the services.
			But you cannot use a service DIRECTLY from another developer from www. In a way what you can do is inject a dependancy of some other module and use services of it,BUT not a service directly
			
			var mymodule = angular.module("app", ["$someRandomServiceFromInternet"]);
			
			mymodule.controller("appController", function("$http","$location","xyz service from $someRandomServiceFromInternet"){
			
				//code goes here
			});
		
	
module.contants()  : USed for sharing common constant data within different controllers of same module.
						Constant's value can not be change 
						Value's data can be change
						Constant can be injected any where 
						Value can be injected in controller, service, factory but can't be injected in config.

module.value()  : USed for sharing common value data within different controllers of same module.
					Note we can also write a common function to be shared by different controllers of same module as a value service.
					
					Constant's value can not be change 
					Value's data can be change
					Constant can be injected any where 
					Value can be injected in controller, service, factory but can't be injected in config.
				

module.controller()


module.factory() : Its a service. The problem with constants and value service is it requires second argument as data/function itself.
					module.value("AppValuesService", {
						"name" : "Dnyanesh",
						"cell" : 97422,
						"address" : "sdasdds"
					});
					
					or 
					
					module.value("AppValuesService", function(){
						return "Hello There";
					});
					
					Above, you see, we always need an concrete object or function as second parameter to constant/value service. In real world, our data comes from DB or some third party service. So we need something which can bring data for us. That "something" may depend upon other services And thats exactly why we use factories.
					Just like automoboile factories pull up the raw material and dish out concrete vehicles, our factory service gonna take in raw data and take out concrete usable objects.
					
					So we can write
						module.factory("AppValuesService", function($someservice1, $someservice2){
							return $someservice1.getdata() + $someservice2.getdata();
						});
					Here factory being factory can depend on other services which constant/value cannot. In case of value/constant it has to be a concrete object or plain old javascript function
						
					

module.service() : Similar to factory but it with one minor difference.
					module.service("myservice", function(){
						this.name = "Dnyanesh",
						this.age = 27
					});
					
					second argument to service service has to be a "constructor function" while for factory it can be a normal function returning value.
					In case of factory function, we must return a value/object.
					In case of service function, JavaScript implicitly return a constructed object

					Recommended way is to use service because its more inclined towards angular2
					
					if you want to use Service from  some different module, you must use below syntax
						var module1 = angular.module("module1", ["module2"]);
						module1.controller("controller1", function(ServicefromModule2){
							//Service 2 is accessible here only if you use exact name in function parameter above
						});
						
					else you need to use below syntax
						module1.controller("controller1",["ServicefromModule2", "$scope", function(module2Service, scope){
							//now i can use $http as http or whatever name if have given in function parameter
							
							//now i can use ServicefromModule2 as module2Service.
						}]);
						
					
Diffrence between factory and service
					See explanation above
					
					
Diffrence between below ? 
					function getDate(){	
						return "Hello";
					}
					doSomething(getData) vs doSomething(getData())???????????????
				
				doSomething(getData) --> This will pass getData function as a argument to doSomething()
				doSomething(getData()) --> This will pass data returned by getData() function as a argument to doSomething()
					
					
					
What is IFFE : Immediately Invoked Function Expression.
						Used to restrict the variables leaking in global scope
					
What is callback hell?			


Promise : An operation that hasnt completed yet but expected to complete in future


Angular Js default Services?


Filters : They are used more of for data representation. There are several default filters available like
            limitTo,uppercase, lowercase, number,currency,date, json, filter
            

            We can define our own filters also at module level.
            
            mymodule.filter("isPassword", function(){
                return function(field){
                    return ******;
                };
            });
            
            <td>{{person.password | isPassword }}</td>
            
            This will cause password fields to be displayed as **** instead of plain text
            
            
            
            filter	: Selects a subset of items from array and returns it as a new array.
            currency : Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default symbol for current            locale is used.

            number	: Formats a number as text.

            date	:Formats date to a string based on the requested format.

            json    : Allows you to convert a JavaScript object into JSON string.

            lowercase : Converts string to lowercase.

            uppercase	:Converts string to uppercase.

            limitTo	:Creates a new array or string containing only a specified number of elements. The elements are taken from either           the beginning or the end of the source array, string or number, as specified by the value and sign (positive or           negative) of limit. Other array-like objects are also supported (e.g. array subclasses, NodeLists,                       jqLite/jQuery collections etc). If a number is used as input, it is converted to a string.

            orderBy	: Returns an array containing the items from the specified collection, ordered by a comparator function based on            the values computed using the expression predicate.
            
			
			
ng-include : It is used to embed html page into another html pages
				This is extremely useful for injecting same view in multiple places in your application
			You can either use ng-include directive or ng-include html tag

				
$http Service : This is one of the core services built on top of XMLHTTPRequest
					It accepts only one parameter.
					
				$http({
				  method: 'GET',
				  url: '/someUrl'
				}).then(function successCallback(response) {
					// this callback will be called asynchronously
					// when the response is available
				  }, function errorCallback(response) {
					// called asynchronously if an error occurs
					// or server returns response with an error status.
				  });	
					
				OR

				you can use shortcut methods like $http.get(), $http.post() etc.
					
				Note angular automatically converts a JSON response to javascript object without writing a single line of code. That conversion happens implicitly	
				
ng-view :   Applications can only have one ng-view directive, and this will be the placeholder for all views provided by the route.
			It can be expressed as 
				<div class="ng-view"></div> OR
				<ng-view></ng-view> OR
				<div ng-view></div>

				
Routing : 	This is a application configuration mechanism  with which we can control how pages are loaded within application.
			We can map the urls to the actual view templates using routing.
		  	Events
				$routeChangStart
				$locationChangeStart
				$routeChangeSuccess
				$locationChangeSuccess
			$routeParams
			Resolving Route change
				This is required when our http calls take time and we dont want to change the route untill http call fetches data 

				

ui-router :	A powerful third party module
			ngRoute is tightly coupled with the application URL.
			uiRouter is bounded with Application state which makes most of the developers to use it over ngRoute
			
			uiRouter allows us to have nested state wherein parent state data is accessed by child state
			With uiRouter we can have multiple ng-views within a application (basically multiple named views)
			
			
Angular JS uses a light version of jquery (JqLite) to make use of the great javascript library for dom manipulation.
If jquery is present in application, it uses jquery else subset of jquery jqLite is used.
If you are using jquery then make sure you include it before angular.js script otherwise it will not be used (jqlite will be used)
JqLite implements only the most commonly needed functionality with the goal of having a very small footprint.

			