Programs : 
		Use any module of your choice from angularmodule.org... to see the power of angular in action
		Unit Testing Using Jasmine
		Learn Build tools  : Gulp, Bower, Yeoman
									
		angular Providers?
		routing
			$routeParams
			$route : reload instead of whole app refresh
		
		
		

Eclipse Configuration For angular : 
	http://www.eclipse.org/webtools/jsdt/
	https://marketplace.eclipse.org/content/angularjs-eclipse#.U4M7rBYqm0o
	ngmodules.org
	getbootstrap.com
    getrandomuser.me
	

AngularJs is all about thinking in angular way. You have to think from entirely different direction as that of jquery.
	
Angular is declarative programming framework
		Meaning you need to write the logic first and then use it logic as a declaration
		e.g. You write your directives and just use it in the html
		
declarative vs imperative programming

Dependency Injection : A concept says that the dependencies you need are given to you rather than you looking for the dependencies.
					e.g. Koushik told example of dev conference  food system

Directive : At a high level, directives are markers on a DOM element that tell AngularJS's HTML compiler ( $compile ) to attach a specified behavior 
			to that DOM element (e.g. via event listeners), or even to transform the DOM element and its children.
			
			There are three types of directives
				Decorator Directives
				DOM manipulating directives
				..???Custom Directive??
			
			Custom directive can be expressed in following ways
				<my-custom-directive></my-custom-directive>
				<div my-custom-directive></div>
				<div class="my-custom-directive"></div>
				
			We can restrict how it can be used in html by providing restrict option to directive
				A =  <div Doc></div>
				C =  <div class="Doc"></div>
				E =  <Doc data="book_data"></Doc>
				M =  <!--directive:Doc -->

			When u feel you are not writing compile or link function in directive, its good time to use component instead of directive.	
			
			A directive can create its own new scope or share scope with the controller or inherit scope---> city bank.
			
			When to use compile?
					when you want to perform some operation  on instance of directive individually
					e.g. In todo app i have used it to add style to todo item based on even odd position.
			
			Order of calling is : Compile, Controller, Prelink, Postlink
			
Module : Its a collection of directives, services, controllers etc.

ng-init : USed for init purpose but not recommended. It inits variables at $scope.
			Ideal use of this is to alias the special properties of ng-repeat
			

ng-app : Typically we have only one ng-app per html application but it is perfectly fine to have two ng-app in a html. In this case, angular would not auto bootstrap the application and you have to specify the bootstrapping steps.
		angular.bootstrap();---> explore more

ng-bind : used to bind an attribute from controller to view.
		  A shorthand notation is preferred in place of this which is {{}}.
		  It is one way data binding.
		  
ng-model : this directive acts as a model in mvw.
		   If you add ng-model, to any html element, angular is going to create a property on $scope object.
		   You can actually access that property in your js code.
		   It is TWO way data binding.
		  
		  
ng-change : used to trigger a function when something changes.		  

ng-if : evaluate the condition and "add/remove" element from DOM. As it removes element from DOM its expensive operation as compared to ng-show, ng-hide.
ng-show : evaluate the condition and show the element in DOM
ng-hide : evaluate the condition and hide the element from DOM

ng-repeat : loop over items

scope : Every variable you use in html is $scoped. Meaning it is implicitly attached to $scope.
		Every time property is updated in $scope, angular automatically updates view by kicking digest cycle. This is called duel way binding.

		Every Controller has its own scope. WE cannot use variable in scope of controller1 inside controller2.
		
		There is a global scope which every controller has access to. Its called $rootscope.
	
		When we use nested controllers, the scope of parent controller is accessible inside child controllers.
		i.e. If parent scope has variable name=Dnyanesh and we use name variable inside child scope, it will become name=Dnyanesh
		So generally speaking, angular scans scope in upward direction till it find the variable value.
			(Analogous to one of the jquery method that scans in upward direction until element is found)
		Angular scans till the $rootscope which is THE GOD scope
		
		So in an enterprise application, where hundreds of controllers are there each having its own scope, its relly messy to find out from which scope does this variable value came from.
		To avoid this situation, angular developers have came up with "controller as" syntax. You declare a controller using this syntax and dont worry about the scope issues.
		In this "controller as" syntax it is recommended that u should not inject $scope into a controller.
		e.g. 
			use below code style
			
			var app = angular.module("app", []);
			app.controller("appController", function(/*  No scope injection here  */){
				//angular compiler is gonna provide you scope implicitly using this
				//so this here refers to $scope
				this.name = "Dnyanesh" // This means name variable is attached to $scope of appController
			});
		
			and use this 
			<div ng-controller="appController as controller">
				Name is {{controller.name}} // similar to name --> $scope.name
			</div>
		
		IMP : Use of "this" instead of $scope works only in case of "controller as" syntax. Without controller-as syntax you must inject $scope as usual
		
		See G:\MyWork\Git\graph15Up\AngularJs\Angular V1\programs\test4.html
		You can use {{name}} and {{controller1.name}} both. choice is yours but second one limits your scope to controller1.
			While first scans for name variable until $rootscope.
		
		Angular doesnt create scope just for controllers. It happens to be that it create scopes for few other elements too.
			ng-if
			each item in ng-repeat
			etc
			To understand it, open inspector, look for class ng-scope. You will find it for controller as well as ng-if
		
		
		
Module : Module is a collections of controllers, services, factories etc.
		For each different functionality we can create as many modules as we want. They make our code very loosely coupled. So we can import any module developed by any developer 
		in our application and start using right away. We just need to add dependency of that module in our module(u see advantages of declarative programming).

		Opposite to it, angular services are local to your application. You can build reusable services and let your controllers depend on the services.
			But you cannot use a service DIRECTLY from another developer from www. In a way what you can do is inject a dependancy of some other module and use services of it,
			BUT not a service directly
			
			var mymodule = angular.module("app", ["$someRandomModuleFromInternet"]);
			
			mymodule.controller("appController", function("$http","$location","xyz service from $someRandomModuleFromInternet module"){
			
				//code goes here
			});
		
	
module.contants()  : USed for sharing common constant data within different controllers of same module.
						Constant's value can not be change 
						Value's data can be change
						Constant can be injected any where 
						Value can be injected in controller, service, factory but can't be injected in config.

module.value()  : USed for sharing common value data within different controllers of same module.
					Note we can also write a common function to be shared by different controllers of same module as a value service.
					
					Constant's value can not be change 
					Value's data can be change
					Constant can be injected any where 
					Value can be injected in controller, service, factory but can't be injected in config.
				

controller	: 	This guy is C in MVC.
				
				If Controller is nested, child controller inherits the scope of parent controller.
				
				@see ControllerScope1.html, @see ControllerScope2.html



module.factory() : Its a service returning an object. 
					
					module.value("AppValuesService", { //Value service definition
						"name" : "Dnyanesh",
						"cell" : 97422,
						"address" : "sdasdds"
					});
					
					or 
					
					module.value("AppValuesService", function(){
						//processing logic can be there
						return "Hello There";
					});
					
					Above, you see, we always need an concrete object or function as second parameter to constant/value service. In real world, our data comes from DB or some third party service. So we need something which can bring data for us. That "something" may depend upon other services And thats exactly why we use factories.
					Just like automoboile factories pull up the raw material and dish out concrete vehicles, our factory service gonna take in raw data and take out concrete usable objects.
					
					So we can write
						module.factory("AppFactory", function($someservice1, $someservice2){
							return $someservice1.getdata() + $someservice2.getdata();
						});
					Here factory being factory can depend on other services which constant/value cannot. In case of value/constant it has to be a concrete object or plain old javascript function returning object.

						
					

module.service() : Similar to factory but it with one minor difference.
					module.service("myservice", function(){
						this.name = "Dnyanesh",
						this.age = 27
					});
					
					second argument to service service has to be a "constructor function" while for factory it can be a normal function returning value.
					In case of factory function, we must return a value/object.
					In case of service function, JavaScript implicitly return a constructed object. Object.create() call to create object out of service.

					Recommended way is to use service because its more inclined towards angular2
					
					if you want to use Service from  some different module, you must use below syntax
						var module1 = angular.module("module1", ["module2"]);
						module1.controller("controller1", function(ServicefromModule2){
							//Service 2 is accessible here only if you use exact name in function parameter above
						});
						
					else you need to use below syntax
						module1.controller("controller1",["ServicefromModule2", "$scope", function(module2Service, scope){
							//now i can use $http as http or whatever name if have given in function parameter
							
							//now i can use ServicefromModule2 as module2Service.
						}]);
						
					
Difference between factory and service
					See explanation above
					
					Factory must return an object(After all that is what real world factories do)
					Service used constructor function.
						If you see angular code, service internally use factory. It used Object.create() notation internally.
						Services gives you hand to migrate them easily to ES6 world. You can easily convert a service to a ES6/typescript class.
						Because it is nothing but a constructor function.
						@see - https://blog.thoughtram.io/angular/2015/07/07/service-vs-factory-once-and-for-all.html
						
					
					
Difference between below ? 
					function getDate(){	
						return "Hello";
					}
					doSomething(getData) vs doSomething(getData())???????????????
				
				doSomething(getData) --> This will pass getData function as a argument to doSomething()
				doSomething(getData()) --> This will pass data returned by getData() function as a argument to doSomething()
					
					
					
What is IFFE : Immediately Invoked Function Expression.
						Used to restrict the variables leaking in global scope

						
				How to access a property out of IIFE?
						The property neeed to be passed to an iife(Ultimately its a function. We can pass data toa function.)
						(function(window){
							//code goes here
						})(window);
						
				Even IIFE is not part of global scope/ window.

					
What is callback hell?			
			ugly code.

Promise : An operation that hasn't completed yet but expected to complete in future.


Angular Js default Services?
			$http,$rootScope,$rootElement,$scope,$anchorscroll,$location,$document etc
			$timeout


Filters : They are used more of for data representation. There are several default filters available like
            limitTo,uppercase, lowercase, number,currency,date, json, filter
            
		formatting Filters
		Sorting filters
		Search Filters
		Custom Filters

            We can define our own filters also at "module level".
            
            mymodule.filter("isPassword", function(){
                return function(field){
                    return ******;
                };
            });
            
            <td>{{person.password | isPassword }}</td>
            
            This will cause password fields to be displayed as **** instead of plain text
            
            
            
            filter	: Selects a subset of items from array and returns it as a new array.
            currency : Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default symbol for current locale is used.

            number	: Formats a number as text.

            date	:Formats date to a string based on the requested format.

            json    : Allows you to convert a JavaScript object into JSON string.

            lowercase : Converts string to lowercase.

            uppercase	:Converts string to uppercase.

            limitTo	:Creates a new array or string containing only a specified number of elements. 
					The elements are taken from either the beginning or the end of the source array, string or number, as specified by the value and sign (positive or negative) of limit. 
					Other array-like objects are also supported (e.g. array subclasses, NodeLists,jqLite/jQuery collections etc). 
					If a number is used as input, it is converted to a string.
					
					Used in conjunction with ng-repeat to limit the results to specified value.

            orderBy	: Returns an array containing the items from the specified collection, ordered by a comparator function based on the values computed using the expression predicate.
            
			
			
ng-include : It is used to embed html page into another html pages
				This is extremely useful for injecting same view in multiple places in your application
			You can either use ng-include directive or ng-include html tag
			Note it create a new scope.

				
$http Service : This is one of the core services built on top of XMLHTTPRequest
					It accepts only one parameter.
					
				$http({
				  method: 'GET',
				  url: '/someUrl'
				}).then(function successCallback(response) {
					// this callback will be called asynchronously
					// when the response is available
				  }, function errorCallback(response) {
					// called asynchronously if an error occurs
					// or server returns response with an error status.
				  });	
					
				OR

				you can use shortcut methods like $http.get(), $http.post() etc.
					
				Note angular automatically converts a JSON response to javascript object without writing a single line of code. That conversion happens implicitly	
				
ng-view :   Applications can only have one ng-view directive, and this will be the placeholder for all views provided by the route.
			It can be expressed as 
				<div class="ng-view"></div> OR
				<ng-view></ng-view> OR
				<div ng-view></div>

				
Routing : 	This is a application configuration mechanism  with which we can control how pages are loaded within application.
			We can map the urls to the actual view templates using routing.
		  	Events
				$routeChangStart
				$locationChangeStart
				$routeChangeSuccess
				$locationChangeSuccess
			$routeParams
			Resolving Route change
				This is required when our http calls take time and we dont want to change the route until http call fetches data.

				

ui-router :	A powerful third party module
			ngRoute is tightly coupled with the application URL.
			uiRouter is bounded with Application state which makes most of the developers to use it over ngRoute
			
			uiRouter allows us to have nested state wherein parent state data is accessed by child state
			With uiRouter we can have multiple ng-views within a application (basically multiple named views)


$compile :	This is first step in processing angular application which is preceded by Linking ($link)
			Angular walks through the DOm and see if any angular people living on the dom. If it finds any, angular will traverse them to see if 
			that guy has any angular people associated with it. And so on...
			Once traversing is completed, angular executes the code within each guy (say directive, filter etc.). This is called as compiling a directive
			It happens only once.
			
			<div my-custom-directive city="Pune">
			</div>  ----------> this is a template for directive myCustomDirective
			
			Its followed by Linking Phase
					Step 1 : Template clone is created 
					Step 2 : Controller of directive is run
					Step 3 : Pre linking 
					Step 4 : Post Linking
					Step 5 : template gets rendered in DOM
				Note step 2,3,4 steps will be performed against the template clone/instance created in first step

			If you write a compile phase of directive. It has below signature.
				app.directive("myDirective" function(){
					compile : function(){
						//compile related code goes here
						
						return {
							pre : function(){}  //prelink code
							post: function(){}  // postlink code
						}
					}
				});
			If you see code like this, 
				app.directive("myDirective" function(){
					compile : function(){
						return function(){
							//This is a by default considered as post-link function body
						}
					}
				}				
			
			OR
				app.directive("myDirective" function(){
					return {
						//This is a by default considered as post-link function body
					}
				});
			
			This is a by default considered as post-link function body
				
			$interpolate : It is used if some expressions are need to be evaluated while running controller of directive
			
			
Angular JS uses a light version of jquery (JqLite) to make use of the great javascript library for dom manipulation.
If jquery is present in application, it uses jquery else subset of jquery jqLite is used.
If you are using jquery then make sure you include it before angular.js script otherwise it will not be used (jqlite will be used)
JqLite implements only the most commonly needed functionality with the goal of having a very small footprint.
At certain places angular js returns a jquery element such as in postlink function.


Watchers : 	This is core service used by angular internally to keep track of changes in the scope variables.
			Not for each scope variable $watch is create automatically, but how many data binding exist in view.
			Every variable in scope doesnt have a watch associated with it. It has to be bound with the view. Only then watch will be created for that scope variable.
			
			At a time any number of watchers may exist but angular suggests watchers count < 2000
			
			$scope.$watch('salary', function(newvalue, oldvalue){
				//things to do after listening to change in scope variable salary
			}
			
			Types of watches : 
				Reference Watch : 
									When complex object is being watched, its called reference watch.
									So until reference is not changed this watch is not going to fire.
									To make it work for prop change in object being watched (i.e. equality watch), we need to pass third parameter as true.
				Equality/Deep Watch : 	
									watches if primitive is changed. Works for primitive variables on scope. 
				
				as we can see, $watch watches at a time only one scope variable. To counter the $watchgroup is used. It watches for a given group scope variables.
					$scope.$watchgroup(['a','b','c'], function(){});
				IMP : watchgroup doesn't support equality watch	
					
				Collection Watch : 
									Used to watch Arrays	
									$scope.$watchCollection(contacts, function(){});
									
									Detect modifications to Arrays in terms of only addition or deletion.
									It never detects if item of an array is modified or not.
									e.g. It can watch if new contact is added in your list. But it never watch if contact is renamed.
									
									For that purpose, you can use $watch(contacts) on your own will considering performance.
									
				All watchers are kept in watchList. Each scope has a different watchlist including $rootscope.
					
					
					
Digest : 	Its a core concept in angularJS
			There is a separate process(not OS process) within a angular context which does digest.
			Its a process of walking through all watchlist (implicit watchers/explicit watchers) to dirty check if anything has modified that is being watched.
			Once this process completed, angular fw is informed to update view.
			
			Digest process runs at global angular context level and not scope level. It starts at root scope.
			
			Min 2 iterations are must be done
			Max 10 iterations of digest cycle are allowed else error is thrown
			
			Who asks digest process to kick in ?
					Whenever there is a browser interaction happens such as DOM event(ng-click, ng-change), Ajax callbacks($http), timers($interval, $timeout),
					browser location change, manual invocation of ($apply, programmatic trigger etc.)
			
			So it is very clear that for all external events digest process will not start.
			e.g. If you are using jquery to handle events (onclick and not ng-click), digest process will not start. 
				If it becomes a must thing for you to use jquery etc for event handling then you must kick digest process manually by using $digest service.
				
			How to kick in digest process?
				When you are doing something outside angular context and you want UI to be updated by angular automatically, digest process need to be kicked in.
				Two ways 
					$scope.$apply() :  	This kicks digest process at "RootScope" always.
										From root scope, it goes on dirty checking child scopes, nested scopes one after the another.
										This apply() method for kicking digest loop is used internally by angular creators behind the scenes for lot of things 
											like ng-click, $http callback etc.
										No matter where you can $apply(), it starts digest loop from $rootscope	always.
											
											
					$scope.$digest():	This kicks digest process in current scope and its child/nested scope only.
										Could be called from $rootscope also.


$eval :	USed for evaluating expressions.
		Plain old JS eval with few additions
		It works on scope used to call eval
		
		$scope.$eval("a * b *c", {c:123});
			Here, a ,b,c must be the scope variables. If any variable is not present in scope it will be taken from locale object (second parameter to eval)
		It uses $parse internally with $scope. 
		
		
$parse : 	It just parses the expression and returns a function.
			e.g. var func = $parse(a*b);
					func($scope);
				we can use this func on any object which can have a and b variables.
				So,
					func({a : 12, b:23});
					
			Shorthand Notation : $parse("a*b")($scope);		
					
			$eval uses $parse internally with $scope.		
			
			$parse returns a function which has one more function called assign. Assign can change object variable value.
			If assign method changes scope variable value, Digest loop gets kicked in automatically.
			SO its very important to note down.
			
			
			
$interpolate: 	Its another flavour to evaluate expression but slightly advanced.
				We can pass any arbitrary string having angular expression to it and it will evaluate it for you.
				
				$interpolate("Result of the a*b is {{a*b}}", and double of that is {{a*b*2}}")($scope);
				It internally uses $parse.
				$Interpolate cannot modify the variable value using assign but $parse does.
				
				
Directive : 	By default, Directive shares scope with the controller in which directive is embedded.
				Its scope can be 
								isolated from parent
										If we create an isolated scope, it cannot access inherited properties. But if we wish, we can pass them by using certain conventions such as @, & and =
										Isolated scope can be created by using scope : {} inside a directive. 
										When parent data need to passed in to isoolated scope,
											@ --- String passed from parent to isolated scope
											& --- Function is passed from parent to isolated scope
											= --- Object is passed from parent to isolated scope. = is dual way binded.
								new child scope + Parent scope 
								Shared scope with parent (default behavior)
				
			
Angular Events : 	First thing is they are not DOM events like click, mouseout, drag etc.
					Understood only angularJS.
					
					$broadcast : Moves from top to bottom.
								 e.g. $rootscope.$broadcast('salaryChanged',{newsal : 100000, oldsal:70000});
									This event will go from rootscope to all child scopes.
									Note , it doesnt matter from how deeply nested scope, event is broadcasted, it will start from the scope from which it is broadcasted
										i.e. $scope4.$broadcast('salaryChanged',{newsal : 100000, oldsal:70000}); 
											this will start from $scope4 till its scope end.
											
					
					$emit :		Moves from current scope uptill rootscope.
								Once it reaches rootscope it starts top to bottom searching for listeners.(really?????)
			
			
			
$RootElement : In AngularJS, bootstrap process is started with "ng-app" directive which is root element. 
				This root element can be declared in any DOM element such as <html>, <body> or in <div> tags to start bootstrap process. 
				This element can be accessed using $rootElement service provided by AngularJS.
				
			
			
How to perform manual bootstraping of angular app?

			
WatchGroup vs WatchCollection			
			
$sceDelegateProvider			
			
			