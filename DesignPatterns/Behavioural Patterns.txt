
Strategy : 	Behavioural
			https://en.wikipedia.org/wiki/Strategy_pattern
			https://www.tutorialspoint.com/design_pattern/strategy_pattern.htm
			http://www.geeksforgeeks.org/strategy-pattern-set-2/
			Similar to Bridge design pattern
			
			Strategy pattern involves removing an algorithm from its host class and putting it in separate class so that in the same programming context 
			there might be different algorithms (i.e. strategies), which can be selected in runtime
			
			e.g. Collection.sort() creates a strategy pattern for sorting. It wants you to pass the strategy for sorting.
				
				MathematicalOprationStrategy class can be built which expects a operation instance(add,divide,multiply etc) to be passed to perform operation.	
				So its all about "selecting an algorithm at runtime"
				It works seamlessly even if you add a new operation like squareroot. It follows an open/close principle.
				
			wiki : According to the strategy pattern, the behaviours of a class should not be inherited. Instead they should be encapsulated using interfaces. 
			As an example, consider a car class. Two possible functionalities for car are brake and accelerate.
			Since accelerate and brake behaviors change frequently between models, a common approach is to implement these behaviors in subclasses. 
			This approach has significant drawbacks: accelerate and brake behaviors must be declared in each new Car model. 
			The work of managing these behaviors increases greatly as the number of models increases, and requires code to be duplicated across models. 
			Additionally, it is not easy to determine the exact nature of the behavior for each model without investigating the code in each.
			
			
Chain of Responsibility : 	a request from client is passed to a chain of objects to process them. Later, the object in the chain will decide 
			themselves who will be processing the request and whether the request is required to be sent to the next object in the chain or not.			
			
			This pattern is recommended when multiple objects can handle a request and the handler doesn’t have to be a specific object. 
			Also, handler is determined at runtime. Please note that that a request not handled at all by any handler is a valid use case.
			
			e.g. Event mechanism in browser. There can be multiple event handlers in bubbling, propagating etc phases. One of them handles the event or passes along the 
			hierarchy chain.
			
			IMP : This type of pattern generally have a member which can point to next request handler.
			In chain of responsibility there can be many handlers for single request object
			

Observer : 	Suppose we are building a cricket app that notifies viewers about the information such as player score, team score etc whenever a run has been scored.
			In such type of cases, observer pattern is used.
			
			http://www.geeksforgeeks.org/observer-pattern-set-1-introduction/
			https://en.wikipedia.org/wiki/Observer_pattern
			https://www.tutorialspoint.com/design_pattern/observer_pattern.htm
			
			The thing being observed is called Observable/subject.
			Whenever a subject is modified it send event to all observers about its state change.
			
Mediator : Usually a program is made up of a large number of classes. Logic and computation is distributed among these classes. 
			However, as more classes are added to a program, especially during maintenance and/or refactoring, the problem of communication between these classes 
			may become more complex. This makes the program harder to read and maintain. 
			Furthermore, it can become difficult to change the program, since any change may affect code in several other classes.
			
			So mediator pattern defines how two classes interact with each other.
			
			definition : "define an object that encapsulates how a set of objects interact"
			
			Mediator pattern is used to reduce communication complexity between multiple objects or classes. 
			This pattern provides a mediator class which normally handles all the communications between different classes and supports easy maintenance
			of the code by loose coupling. Mediator pattern falls under behavioral pattern category.
			
			e.g. In chatroom example, individual user is not sending messages to other user but to chatroom. Chatroom is mediator which takes care of the tracking which
			user is chatting with whom and stuff like that.
			
			Air traffic controller is a great example of mediator pattern where the airport control room works as a mediator for communication between different flights. 
			Mediator works as a router between objects and it can have it’s own logic to provide way of communication.
			
			
			
Template method :	Behavioural
					When you want a system to run in certain sequence and you dont want anyone to alter the sequence then Template design pattern is used.
					e.g. When a house is built, it consist of certain template steps like laying foundation, building walls, adding roof, painting house and decorating. These steps 
					are fixed for all houses.
					So template method define this sequence and forces developer to follow it. Developer can alter individual step like  walls can be concrete wall or glass wall.
					
					code it : buildhouse should be final so that no one can reimplement it and change order of steps.
					
					
					
Interpreter : Behavioural
			  Widely used in evaluating expressions such as SQL, programming language grammar, arithmetic operations,symbol processing engine etc.
			  
			  
			
			
			
				
			
			
			
			
				 
			
			
			